import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

buildscript {
	repositories {
		jcenter()
		maven { url = 'https://repo.spongepowered.org/maven' }
	}

	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}

apply 'plugin': 'com.github.johnrengelman.shadow'

group = 'com.enderzombi102'
version = '1.0-SNAPSHOT'

subprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'com.github.johnrengelman.shadow'

	configurations {
		shadow
	}

	version = rootProject.mod_version
	archivesBaseName = rootProject.archives_base_name

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	shadowJar {
		configurations = [project.configurations.shadow]
		classifier "shadow"

		dependencies {
			exclude( project(':loadercomplex-common') )
		}
	}

	tasks.build.dependsOn tasks.shadowJar
}

task merge {

	doLast {

		final Path bigJar = rootProject.buildDir.toPath().getFileSystem().getPath(rootProject.buildDir.path, "/tmp/bigjar")
		for (Project proj : subprojects) {
			Path path = proj.buildDir.toPath().getFileSystem().getPath(
					proj.buildDir.getPath() + '/libs',
					rootProject.archives_base_name +
							"-" +
							rootProject.mod_version +
							".jar"
			)
			unzip(path.toFile(), bigJar.toFile())
		}
		compress(
				bigJar,
				rootProject.buildDir.toPath().getFileSystem().getPath(
						rootProject.buildDir.getPath() +
								"/libs",
						rootProject.archives_base_name +
								"-merged-" +
								rootProject.mod_version +
								".jar"
				).toFile()
		)
	}
}

rootProject.subprojects.forEach {
	merge.mustRunAfter it.tasks.getByName("build")
}

static def compress(Path sourceDir, File zipFile) {
	try {
		final ZipOutputStream outputStream = new ZipOutputStream(new FileOutputStream(zipFile))
		Files.walkFileTree(sourceDir, new SimpleFileVisitor<Path>() {
			@Override
			FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {
				try {
					Path targetFile = sourceDir.relativize(file)
					outputStream.putNextEntry(new ZipEntry(targetFile.toString()))
					byte[] bytes = Files.readAllBytes(file)
					outputStream.write(bytes, 0, bytes.length)
					outputStream.closeEntry()
				} catch (IOException e) {
					e.printStackTrace()
				}
				return FileVisitResult.CONTINUE
			}
		})
		outputStream.close()
	} catch (IOException e) {
		e.printStackTrace()
	}
}

static def unzip(File zipFile, File destDir) {
	if (!destDir.exists())
		destDir.mkdirs()
	FileInputStream fis
	byte[] buffer = new byte[1024]
	try {
		fis = new FileInputStream(zipFile)
		ZipInputStream zis = new ZipInputStream(fis)
		ZipEntry zipEntry = zis.getNextEntry()
		while (zipEntry != null) {
			if (!zipEntry.isDirectory()) {
				File newFile = new File(destDir, zipEntry.getName())
				if ( zipEntry.getName().equals("META-INF/MANIFEST.MF") ) {
					if (! zipFile.path.contains("-forge-") ) {
						zis.closeEntry()
						zipEntry = zis.getNextEntry()
						continue
					}
				}
				new File(newFile.getParent()).mkdirs()
				FileOutputStream fos = new FileOutputStream(newFile)
				int len
				while ((len = zis.read(buffer)) > 0) {
					fos.write(buffer, 0, len)
				}
				fos.close()
			}
			zis.closeEntry()
			zipEntry = zis.getNextEntry()
		}
		zis.closeEntry()
		zis.close()
	} catch (IOException e) {
		e.printStackTrace()
	} finally {
		if (fis) fis.close()
	}
}
