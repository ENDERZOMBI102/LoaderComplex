import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.jar.JarEntry
import java.util.jar.JarInputStream
import java.util.jar.JarOutputStream

buildscript {
	repositories {
		jcenter()
		maven { url = 'https://repo.spongepowered.org/maven' }
	}

	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}

apply 'plugin': 'com.github.johnrengelman.shadow'

group = 'com.enderzombi102'
version = '1.0-SNAPSHOT'

subprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'com.github.johnrengelman.shadow'

	configurations {
		shadow
	}

	version = rootProject.mod_version
	archivesBaseName = rootProject.archives_base_name

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	shadowJar {
		configurations = [project.configurations.shadow]
		classifier "shadow"

		dependencies {
			exclude( project(':loadercomplex-common') )
		}
	}

	tasks.build.dependsOn tasks.shadowJar
}

task merge2 {
	doLast {
		try {
			// out jar path
			final Path outPath = rootProject.buildDir.toPath().getFileSystem().getPath(
					rootProject.buildDir.getPath() + '/libs',
					( (String) (Object) rootProject.archives_base_name ) +
							"-merged-" +
							( (String) (Object) rootProject.mod_version ) +
							".jar"
			)

			// create out jar
			outPath.toFile().createNewFile()

			// get a lifesystem for the output jar
			final FileSystem jar = FileSystems.newFileSystem(
					URI.create(
							"jar:" + outPath.toUri().toString()
					),
					Collections.emptyMap()
			)
			final Path outRoot = jar.getPath("/")
			// cicle in all subprojects
			for (Project proj : subprojects) {
				// get filesystem for subproject artifact jar
				final FileSystem inputJar = FileSystems.newFileSystem( URI.create( "jar:" + getArtifactFrom(proj, rootProject) ), Collections.emptyMap() )
				// copy everything
				Files.walkFileTree(inputJar.getPath("/"), new SimpleFileVisitor<Path>() {
					@Override
					FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {
						Path path = file.relativize(inputJar.getPath("/"))
						Files.copy( file, outRoot.resolve(path) )
						return FileVisitResult.CONTINUE
					}
				})
			}
		} catch (Exception e) {
			e.printStackTrace()
		}
	}
}

task merge {

	doLast {

		final Path bigJar = rootProject.buildDir.toPath().getFileSystem().getPath(rootProject.buildDir.path, "/tmp/bigjar")
		for (Project proj : subprojects) {
			Path path = proj.buildDir.toPath().getFileSystem().getPath(
					proj.buildDir.getPath() + '/libs',
					( (String) (Object) rootProject.archives_base_name ) +
							"-" +
							( (String) (Object) rootProject.mod_version ) +
							"-shadow.jar"
			)
			unzip(path.toFile(), bigJar.toFile())
		}
		compress(
				bigJar,
				rootProject.buildDir.toPath().getFileSystem().getPath(
						rootProject.buildDir.getPath() +
								"/libs",
						( (String) (Object) rootProject.archives_base_name ) +
								"-merged-" +
								( (String) (Object) rootProject.mod_version ) +
								".jar"
				).toFile()
		)
	}
}

rootProject.subprojects.forEach {
	merge.mustRunAfter it.tasks.getByName("build")
}

static def getArtifactFrom(Project proj, Project rootProject) {
	return proj.buildDir.toPath().getFileSystem().getPath(
			proj.buildDir.getPath() + '/libs',
			( (String) (Object) rootProject.archives_base_name ) +
				"-" +
				( (String) (Object) rootProject.mod_version ) +
				"-shadow.jar"
	).toUri().toString()
}

static def compress(Path sourceDir, File zipFile) {
	try {
		if ( zipFile.exists() ) zipFile.delete()

		final JarOutputStream outputStream = new JarOutputStream(new FileOutputStream(zipFile))
		Files.walkFileTree(sourceDir, new SimpleFileVisitor<Path>() {
			@Override
			FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {
				try {
					Path targetFile = sourceDir.relativize(file)
					outputStream.putNextEntry(new JarEntry(targetFile.toString()))
					byte[] bytes = Files.readAllBytes(file)
					outputStream.write(bytes, 0, bytes.length)
					outputStream.closeEntry()
				} catch (IOException e) {
					e.printStackTrace()
				}
				return FileVisitResult.CONTINUE
			}
		})
		outputStream.close()
	} catch (IOException e) {
		e.printStackTrace()
	}
}

static def unzip(File zipFile, File destDir) {
	new File( destDir.getPath() ).renameTo('old')
	destDir.mkdirs()
	FileInputStream fis
	try {
		fis = new FileInputStream(zipFile)
		JarInputStream zis = new JarInputStream(fis)
		JarEntry zipEntry = (JarEntry) zis.getNextEntry()
		while (zipEntry != null) {
			if (! zipEntry.isDirectory() ) {
				File newFile = new File(destDir, zipEntry.getName())
				if ( zipEntry.getName() == "META-INF/MANIFEST.MF" ) {
					if (! zipFile.path.contains("-forge-") ) {
						zis.closeEntry()
						zipEntry = (JarEntry) zis.getNextEntry()
						continue
					}
				}
				new File( newFile.getParent() ).mkdirs()
				FileOutputStream fos = new FileOutputStream(newFile)
				byte[] buf = zis.readAllBytes()
				fos.write( buf, 0, buf.length )
				fos.close()
			}
			zis.closeEntry()
			zipEntry = (JarEntry) zis.getNextEntry()
		}
		zis.closeEntry()
		zis.close()
	} catch (IOException e) {
		e.printStackTrace()
	} finally {
		if (fis) fis.close()
	}
}
