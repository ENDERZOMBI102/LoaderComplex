buildscript {
	repositories {
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

apply plugin: 'net.minecraftforge.gradle'

group = maven_group
archivesBaseName = archives_base_name

minecraft {
	mappings channel: 'snapshot', version: '20171003-1.12'

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory rootProject.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			mods {
				loadercomplex {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory rootProject.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			mods {
				loadercomplex {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

	// Real mod deobf dependency examples - these get remapped to your current mappings
	// compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
	// runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
	// implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

	// Examples using mod jars from ./libs
	// implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

processResources {
	inputs.property 'version', rootProject.version
	inputs.property 'description', rootProject.description
	inputs.property 'repo_url', rootProject.repo_url

	filesMatching('mcmod.info') {
		expand([
			'version': rootProject.version,
			'description': rootProject.description,
			'repo_url': rootProject.repo_url
		])
	}
}

tasks.withType(JavaCompile).configureEach {
	it.sourceCompatibility = 8 // for the IDE support
	it.options.encoding = 'UTF-8'
	it.options.release.set(8)
}

jar.finalizedBy('reobfJar')

afterEvaluate {
	artifacts {
		jarz file( "$buildDir/reobfJar/output.jar" )
	}
}